// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// geral_calc_portfolio_variance_C
List geral_calc_portfolio_variance_C(arma::vec phi, arma::vec q_phi, arma::vec r_phi, arma::mat rt, arma::mat burn_rt, arma::mat q_rt, arma::mat r_rt, arma::mat S, arma::mat Dt, arma::mat q_Dt, arma::mat r_Dt, arma::mat q_S, arma::mat r_S, double cy2, double chisq2);
RcppExport SEXP _robcdcc_geral_calc_portfolio_variance_C(SEXP phiSEXP, SEXP q_phiSEXP, SEXP r_phiSEXP, SEXP rtSEXP, SEXP burn_rtSEXP, SEXP q_rtSEXP, SEXP r_rtSEXP, SEXP SSEXP, SEXP DtSEXP, SEXP q_DtSEXP, SEXP r_DtSEXP, SEXP q_SSEXP, SEXP r_SSEXP, SEXP cy2SEXP, SEXP chisq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type q_phi(q_phiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type r_phi(r_phiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type rt(rtSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type burn_rt(burn_rtSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type q_rt(q_rtSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type r_rt(r_rtSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Dt(DtSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type q_Dt(q_DtSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type r_Dt(r_DtSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type q_S(q_SSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type r_S(r_SSEXP);
    Rcpp::traits::input_parameter< double >::type cy2(cy2SEXP);
    Rcpp::traits::input_parameter< double >::type chisq2(chisq2SEXP);
    rcpp_result_gen = Rcpp::wrap(geral_calc_portfolio_variance_C(phi, q_phi, r_phi, rt, burn_rt, q_rt, r_rt, S, Dt, q_Dt, r_Dt, q_S, r_S, cy2, chisq2));
    return rcpp_result_gen;
END_RCPP
}
// calc_real_portfolio_variance_C
double calc_real_portfolio_variance_C(arma::vec phi, arma::mat burn_rt, arma::mat rt, arma::mat S, arma::mat Dt);
RcppExport SEXP _robcdcc_calc_real_portfolio_variance_C(SEXP phiSEXP, SEXP burn_rtSEXP, SEXP rtSEXP, SEXP SSEXP, SEXP DtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type burn_rt(burn_rtSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type rt(rtSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Dt(DtSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_real_portfolio_variance_C(phi, burn_rt, rt, S, Dt));
    return rcpp_result_gen;
END_RCPP
}
// unconditional_correlation
arma::mat unconditional_correlation(arma::mat tilde_epsilon, int nobs);
RcppExport SEXP _robcdcc_unconditional_correlation(SEXP tilde_epsilonSEXP, SEXP nobsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type tilde_epsilon(tilde_epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type nobs(nobsSEXP);
    rcpp_result_gen = Rcpp::wrap(unconditional_correlation(tilde_epsilon, nobs));
    return rcpp_result_gen;
END_RCPP
}
// compositeCDCC_C
double compositeCDCC_C(double alpha, double beta, arma::mat St, int nobs, int ndim);
RcppExport SEXP _robcdcc_compositeCDCC_C(SEXP alphaSEXP, SEXP betaSEXP, SEXP StSEXP, SEXP nobsSEXP, SEXP ndimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type St(StSEXP);
    Rcpp::traits::input_parameter< int >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< int >::type ndim(ndimSEXP);
    rcpp_result_gen = Rcpp::wrap(compositeCDCC_C(alpha, beta, St, nobs, ndim));
    return rcpp_result_gen;
END_RCPP
}
// calc_Qs_C
arma::mat calc_Qs_C(arma::vec phi, arma::mat rt);
RcppExport SEXP _robcdcc_calc_Qs_C(SEXP phiSEXP, SEXP rtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type rt(rtSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_Qs_C(phi, rt));
    return rcpp_result_gen;
END_RCPP
}
// calc_Rt_C
arma::mat calc_Rt_C(arma::vec phi, arma::mat rt, arma::mat S);
RcppExport SEXP _robcdcc_calc_Rt_C(SEXP phiSEXP, SEXP rtSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type rt(rtSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_Rt_C(phi, rt, S));
    return rcpp_result_gen;
END_RCPP
}
// loglikelihoodGARCH_C
double loglikelihoodGARCH_C(double alpha1, double beta1, NumericVector rt, int nobs, double h);
RcppExport SEXP _robcdcc_loglikelihoodGARCH_C(SEXP alpha1SEXP, SEXP beta1SEXP, SEXP rtSEXP, SEXP nobsSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< double >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rt(rtSEXP);
    Rcpp::traits::input_parameter< int >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikelihoodGARCH_C(alpha1, beta1, rt, nobs, h));
    return rcpp_result_gen;
END_RCPP
}
// calc_ht_C
NumericVector calc_ht_C(double omega, double alpha1, double beta1, NumericVector rt, int nobs);
RcppExport SEXP _robcdcc_calc_ht_C(SEXP omegaSEXP, SEXP alpha1SEXP, SEXP beta1SEXP, SEXP rtSEXP, SEXP nobsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< double >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rt(rtSEXP);
    Rcpp::traits::input_parameter< int >::type nobs(nobsSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_ht_C(omega, alpha1, beta1, rt, nobs));
    return rcpp_result_gen;
END_RCPP
}
// corr_reweighted_C
arma::mat corr_reweighted_C(arma::mat St, double chisq2, double cy2);
RcppExport SEXP _robcdcc_corr_reweighted_C(SEXP StSEXP, SEXP chisq2SEXP, SEXP cy2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type St(StSEXP);
    Rcpp::traits::input_parameter< double >::type chisq2(chisq2SEXP);
    Rcpp::traits::input_parameter< double >::type cy2(cy2SEXP);
    rcpp_result_gen = Rcpp::wrap(corr_reweighted_C(St, chisq2, cy2));
    return rcpp_result_gen;
END_RCPP
}
// robust_compositeCDCC_C
double robust_compositeCDCC_C(double alpha, double beta, arma::mat St, int nobs, int ndim, double cy1, double chisq1, double cy2, double chisq2);
RcppExport SEXP _robcdcc_robust_compositeCDCC_C(SEXP alphaSEXP, SEXP betaSEXP, SEXP StSEXP, SEXP nobsSEXP, SEXP ndimSEXP, SEXP cy1SEXP, SEXP chisq1SEXP, SEXP cy2SEXP, SEXP chisq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type St(StSEXP);
    Rcpp::traits::input_parameter< int >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< int >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< double >::type cy1(cy1SEXP);
    Rcpp::traits::input_parameter< double >::type chisq1(chisq1SEXP);
    Rcpp::traits::input_parameter< double >::type cy2(cy2SEXP);
    Rcpp::traits::input_parameter< double >::type chisq2(chisq2SEXP);
    rcpp_result_gen = Rcpp::wrap(robust_compositeCDCC_C(alpha, beta, St, nobs, ndim, cy1, chisq1, cy2, chisq2));
    return rcpp_result_gen;
END_RCPP
}
// robust_calc_Qs_C
arma::mat robust_calc_Qs_C(arma::vec phi, arma::mat rt, double cy1, double chisq1);
RcppExport SEXP _robcdcc_robust_calc_Qs_C(SEXP phiSEXP, SEXP rtSEXP, SEXP cy1SEXP, SEXP chisq1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type rt(rtSEXP);
    Rcpp::traits::input_parameter< double >::type cy1(cy1SEXP);
    Rcpp::traits::input_parameter< double >::type chisq1(chisq1SEXP);
    rcpp_result_gen = Rcpp::wrap(robust_calc_Qs_C(phi, rt, cy1, chisq1));
    return rcpp_result_gen;
END_RCPP
}
// robust_calc_Rt_C
List robust_calc_Rt_C(arma::vec phi, arma::mat rt, arma::mat S, double cy2, double chisq2);
RcppExport SEXP _robcdcc_robust_calc_Rt_C(SEXP phiSEXP, SEXP rtSEXP, SEXP SSEXP, SEXP cy2SEXP, SEXP chisq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type rt(rtSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type cy2(cy2SEXP);
    Rcpp::traits::input_parameter< double >::type chisq2(chisq2SEXP);
    rcpp_result_gen = Rcpp::wrap(robust_calc_Rt_C(phi, rt, S, cy2, chisq2));
    return rcpp_result_gen;
END_RCPP
}
// robust_loglikelihoodGARCH_C
double robust_loglikelihoodGARCH_C(double alpha1, double beta1, NumericVector rt, int nobs, double h, double cy, double chisq);
RcppExport SEXP _robcdcc_robust_loglikelihoodGARCH_C(SEXP alpha1SEXP, SEXP beta1SEXP, SEXP rtSEXP, SEXP nobsSEXP, SEXP hSEXP, SEXP cySEXP, SEXP chisqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< double >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rt(rtSEXP);
    Rcpp::traits::input_parameter< int >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< double >::type cy(cySEXP);
    Rcpp::traits::input_parameter< double >::type chisq(chisqSEXP);
    rcpp_result_gen = Rcpp::wrap(robust_loglikelihoodGARCH_C(alpha1, beta1, rt, nobs, h, cy, chisq));
    return rcpp_result_gen;
END_RCPP
}
// robust_calc_ht_C
List robust_calc_ht_C(double omega, double alpha1, double beta1, NumericVector rt, int nobs, double cy, double chisq);
RcppExport SEXP _robcdcc_robust_calc_ht_C(SEXP omegaSEXP, SEXP alpha1SEXP, SEXP beta1SEXP, SEXP rtSEXP, SEXP nobsSEXP, SEXP cySEXP, SEXP chisqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< double >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rt(rtSEXP);
    Rcpp::traits::input_parameter< int >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< double >::type cy(cySEXP);
    Rcpp::traits::input_parameter< double >::type chisq(chisqSEXP);
    rcpp_result_gen = Rcpp::wrap(robust_calc_ht_C(omega, alpha1, beta1, rt, nobs, cy, chisq));
    return rcpp_result_gen;
END_RCPP
}
// simCDCC_C
arma::mat simCDCC_C(arma::vec phi, arma::mat S, int nobs, double seed);
RcppExport SEXP _robcdcc_simCDCC_C(SEXP phiSEXP, SEXP SSEXP, SEXP nobsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< double >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(simCDCC_C(phi, S, nobs, seed));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_robcdcc_geral_calc_portfolio_variance_C", (DL_FUNC) &_robcdcc_geral_calc_portfolio_variance_C, 15},
    {"_robcdcc_calc_real_portfolio_variance_C", (DL_FUNC) &_robcdcc_calc_real_portfolio_variance_C, 5},
    {"_robcdcc_unconditional_correlation", (DL_FUNC) &_robcdcc_unconditional_correlation, 2},
    {"_robcdcc_compositeCDCC_C", (DL_FUNC) &_robcdcc_compositeCDCC_C, 5},
    {"_robcdcc_calc_Qs_C", (DL_FUNC) &_robcdcc_calc_Qs_C, 2},
    {"_robcdcc_calc_Rt_C", (DL_FUNC) &_robcdcc_calc_Rt_C, 3},
    {"_robcdcc_loglikelihoodGARCH_C", (DL_FUNC) &_robcdcc_loglikelihoodGARCH_C, 5},
    {"_robcdcc_calc_ht_C", (DL_FUNC) &_robcdcc_calc_ht_C, 5},
    {"_robcdcc_corr_reweighted_C", (DL_FUNC) &_robcdcc_corr_reweighted_C, 3},
    {"_robcdcc_robust_compositeCDCC_C", (DL_FUNC) &_robcdcc_robust_compositeCDCC_C, 9},
    {"_robcdcc_robust_calc_Qs_C", (DL_FUNC) &_robcdcc_robust_calc_Qs_C, 4},
    {"_robcdcc_robust_calc_Rt_C", (DL_FUNC) &_robcdcc_robust_calc_Rt_C, 5},
    {"_robcdcc_robust_loglikelihoodGARCH_C", (DL_FUNC) &_robcdcc_robust_loglikelihoodGARCH_C, 7},
    {"_robcdcc_robust_calc_ht_C", (DL_FUNC) &_robcdcc_robust_calc_ht_C, 7},
    {"_robcdcc_simCDCC_C", (DL_FUNC) &_robcdcc_simCDCC_C, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_robcdcc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
