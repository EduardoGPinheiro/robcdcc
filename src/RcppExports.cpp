// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// geral_calc_portfolio_variance
arma::vec geral_calc_portfolio_variance(arma::vec phi, arma::vec q_phi, arma::vec r_phi, arma::mat rt, arma::mat burn_rt, arma::mat cont_rt, arma::mat S, arma::mat q_S, arma::mat r_S, double cy2, double chisq2);
RcppExport SEXP _robcdcc_geral_calc_portfolio_variance(SEXP phiSEXP, SEXP q_phiSEXP, SEXP r_phiSEXP, SEXP rtSEXP, SEXP burn_rtSEXP, SEXP cont_rtSEXP, SEXP SSEXP, SEXP q_SSEXP, SEXP r_SSEXP, SEXP cy2SEXP, SEXP chisq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type q_phi(q_phiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type r_phi(r_phiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type rt(rtSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type burn_rt(burn_rtSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cont_rt(cont_rtSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type q_S(q_SSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type r_S(r_SSEXP);
    Rcpp::traits::input_parameter< double >::type cy2(cy2SEXP);
    Rcpp::traits::input_parameter< double >::type chisq2(chisq2SEXP);
    rcpp_result_gen = Rcpp::wrap(geral_calc_portfolio_variance(phi, q_phi, r_phi, rt, burn_rt, cont_rt, S, q_S, r_S, cy2, chisq2));
    return rcpp_result_gen;
END_RCPP
}
// real_portfolio_var
double real_portfolio_var(arma::vec phi, arma::mat S, arma::mat rt, int n);
RcppExport SEXP _robcdcc_real_portfolio_var(SEXP phiSEXP, SEXP SSEXP, SEXP rtSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type rt(rtSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(real_portfolio_var(phi, S, rt, n));
    return rcpp_result_gen;
END_RCPP
}
// unconditional_correlation
arma::mat unconditional_correlation(arma::mat tilde_epsilon, int nobs);
RcppExport SEXP _robcdcc_unconditional_correlation(SEXP tilde_epsilonSEXP, SEXP nobsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type tilde_epsilon(tilde_epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type nobs(nobsSEXP);
    rcpp_result_gen = Rcpp::wrap(unconditional_correlation(tilde_epsilon, nobs));
    return rcpp_result_gen;
END_RCPP
}
// compositeCDCC_C
double compositeCDCC_C(double alpha, double beta, arma::mat epsilon, arma::mat Dt, int nobs, int ndim);
RcppExport SEXP _robcdcc_compositeCDCC_C(SEXP alphaSEXP, SEXP betaSEXP, SEXP epsilonSEXP, SEXP DtSEXP, SEXP nobsSEXP, SEXP ndimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Dt(DtSEXP);
    Rcpp::traits::input_parameter< int >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< int >::type ndim(ndimSEXP);
    rcpp_result_gen = Rcpp::wrap(compositeCDCC_C(alpha, beta, epsilon, Dt, nobs, ndim));
    return rcpp_result_gen;
END_RCPP
}
// calc_Rt_C
arma::mat calc_Rt_C(double alpha, double beta, arma::mat epsilon, int nobs);
RcppExport SEXP _robcdcc_calc_Rt_C(SEXP alphaSEXP, SEXP betaSEXP, SEXP epsilonSEXP, SEXP nobsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type nobs(nobsSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_Rt_C(alpha, beta, epsilon, nobs));
    return rcpp_result_gen;
END_RCPP
}
// calc_Qs
arma::mat calc_Qs(arma::vec phi, arma::mat rt);
RcppExport SEXP _robcdcc_calc_Qs(SEXP phiSEXP, SEXP rtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type rt(rtSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_Qs(phi, rt));
    return rcpp_result_gen;
END_RCPP
}
// calc_portfolio_variance
double calc_portfolio_variance(arma::vec phi, arma::vec hat_phi, arma::mat rt, arma::mat cont_rt, arma::mat S, arma::mat hat_S);
RcppExport SEXP _robcdcc_calc_portfolio_variance(SEXP phiSEXP, SEXP hat_phiSEXP, SEXP rtSEXP, SEXP cont_rtSEXP, SEXP SSEXP, SEXP hat_SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hat_phi(hat_phiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type rt(rtSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cont_rt(cont_rtSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type hat_S(hat_SSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_portfolio_variance(phi, hat_phi, rt, cont_rt, S, hat_S));
    return rcpp_result_gen;
END_RCPP
}
// spearman_corr
arma::mat spearman_corr(arma::mat St);
RcppExport SEXP _robcdcc_spearman_corr(SEXP StSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type St(StSEXP);
    rcpp_result_gen = Rcpp::wrap(spearman_corr(St));
    return rcpp_result_gen;
END_RCPP
}
// corr_reweighted_C
arma::mat corr_reweighted_C(arma::mat St, double chisq2, double cy2);
RcppExport SEXP _robcdcc_corr_reweighted_C(SEXP StSEXP, SEXP chisq2SEXP, SEXP cy2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type St(StSEXP);
    Rcpp::traits::input_parameter< double >::type chisq2(chisq2SEXP);
    Rcpp::traits::input_parameter< double >::type cy2(cy2SEXP);
    rcpp_result_gen = Rcpp::wrap(corr_reweighted_C(St, chisq2, cy2));
    return rcpp_result_gen;
END_RCPP
}
// robust_compositeCDCC_C
double robust_compositeCDCC_C(double alpha, double beta, arma::mat St, int nobs, int ndim, double cy1, double chisq1, double cy2, double chisq2);
RcppExport SEXP _robcdcc_robust_compositeCDCC_C(SEXP alphaSEXP, SEXP betaSEXP, SEXP StSEXP, SEXP nobsSEXP, SEXP ndimSEXP, SEXP cy1SEXP, SEXP chisq1SEXP, SEXP cy2SEXP, SEXP chisq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type St(StSEXP);
    Rcpp::traits::input_parameter< int >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< int >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< double >::type cy1(cy1SEXP);
    Rcpp::traits::input_parameter< double >::type chisq1(chisq1SEXP);
    Rcpp::traits::input_parameter< double >::type cy2(cy2SEXP);
    Rcpp::traits::input_parameter< double >::type chisq2(chisq2SEXP);
    rcpp_result_gen = Rcpp::wrap(robust_compositeCDCC_C(alpha, beta, St, nobs, ndim, cy1, chisq1, cy2, chisq2));
    return rcpp_result_gen;
END_RCPP
}
// robust_calc_Qs
arma::mat robust_calc_Qs(arma::vec phi, arma::mat rt, double cy1, double chisq1);
RcppExport SEXP _robcdcc_robust_calc_Qs(SEXP phiSEXP, SEXP rtSEXP, SEXP cy1SEXP, SEXP chisq1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type rt(rtSEXP);
    Rcpp::traits::input_parameter< double >::type cy1(cy1SEXP);
    Rcpp::traits::input_parameter< double >::type chisq1(chisq1SEXP);
    rcpp_result_gen = Rcpp::wrap(robust_calc_Qs(phi, rt, cy1, chisq1));
    return rcpp_result_gen;
END_RCPP
}
// robust_calc_portfolio_variance
double robust_calc_portfolio_variance(arma::vec phi, arma::vec hat_phi, arma::mat rt, arma::mat cont_rt, arma::mat S, arma::mat hat_S, double cy2, double chisq2);
RcppExport SEXP _robcdcc_robust_calc_portfolio_variance(SEXP phiSEXP, SEXP hat_phiSEXP, SEXP rtSEXP, SEXP cont_rtSEXP, SEXP SSEXP, SEXP hat_SSEXP, SEXP cy2SEXP, SEXP chisq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hat_phi(hat_phiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type rt(rtSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cont_rt(cont_rtSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type hat_S(hat_SSEXP);
    Rcpp::traits::input_parameter< double >::type cy2(cy2SEXP);
    Rcpp::traits::input_parameter< double >::type chisq2(chisq2SEXP);
    rcpp_result_gen = Rcpp::wrap(robust_calc_portfolio_variance(phi, hat_phi, rt, cont_rt, S, hat_S, cy2, chisq2));
    return rcpp_result_gen;
END_RCPP
}
// simCDCC_C
arma::mat simCDCC_C(arma::vec phi, arma::mat S, int nobs, double seed);
RcppExport SEXP _robcdcc_simCDCC_C(SEXP phiSEXP, SEXP SSEXP, SEXP nobsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< double >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(simCDCC_C(phi, S, nobs, seed));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_robcdcc_geral_calc_portfolio_variance", (DL_FUNC) &_robcdcc_geral_calc_portfolio_variance, 11},
    {"_robcdcc_real_portfolio_var", (DL_FUNC) &_robcdcc_real_portfolio_var, 4},
    {"_robcdcc_unconditional_correlation", (DL_FUNC) &_robcdcc_unconditional_correlation, 2},
    {"_robcdcc_compositeCDCC_C", (DL_FUNC) &_robcdcc_compositeCDCC_C, 6},
    {"_robcdcc_calc_Rt_C", (DL_FUNC) &_robcdcc_calc_Rt_C, 4},
    {"_robcdcc_calc_Qs", (DL_FUNC) &_robcdcc_calc_Qs, 2},
    {"_robcdcc_calc_portfolio_variance", (DL_FUNC) &_robcdcc_calc_portfolio_variance, 6},
    {"_robcdcc_spearman_corr", (DL_FUNC) &_robcdcc_spearman_corr, 1},
    {"_robcdcc_corr_reweighted_C", (DL_FUNC) &_robcdcc_corr_reweighted_C, 3},
    {"_robcdcc_robust_compositeCDCC_C", (DL_FUNC) &_robcdcc_robust_compositeCDCC_C, 9},
    {"_robcdcc_robust_calc_Qs", (DL_FUNC) &_robcdcc_robust_calc_Qs, 4},
    {"_robcdcc_robust_calc_portfolio_variance", (DL_FUNC) &_robcdcc_robust_calc_portfolio_variance, 8},
    {"_robcdcc_simCDCC_C", (DL_FUNC) &_robcdcc_simCDCC_C, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_robcdcc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
