mutate(epsilon = recode(as.character(epsilon), '0' = '0 %'),
d = recode(as.character(d), '0' = 'd = 0'))
variance_df
long_variance_df = variance_df %>% melt(id_vars = c('epsilon', 'd', 'delta'))
long_variance_df
# Renaming values
variance_df = variance_df %>%
mutate(epsilon = recode(as.character(epsilon), '0' = '0 %'),
d = recode(as.character(d), '0' = 'd = 0')) %>%
select(-seed, -delta)
# Long format
long_variance_df = variance_df %>% melt(id_vars = c('epsilon', 'd', 'delta'))
long_variance_df
# Long format
variance_df_long = variance_df %>% melt(id_vars = c('epsilon', 'd', 'delta'))
# Box plot
box_plot = function(data){
p = data %>%
ggplot(aes(x = variable, y = value)) +
facet_wrap(consecutive ~ epsilon + d, nrow = 1) +
geom_boxplot() +
theme_half_open(12) +
background_grid() +
theme(
legend.position = 'none',
strip.background = element_blank(),
strip.text = element_textbox(
size = 12,
color = "white", fill = "gray23", box.color = "gray23",
halign = 0.5, linetype = 1, r = unit(5, "pt"), width = unit(1, "npc"),
padding = margin(2, 0, 1, 0), margin = margin(3, 3, 3, 3)
)
) + xlab('Modelo') + scale_x_discrete(label = c('Q', 'R')) + ylab(' ')
return(p)
}
p1 = variance_df_long %>% filter(str_detect(variable, 'vt')) %>% box_plot
library(ggplot2)
library(cowplot)
library(dplyr)
library(reshape2)
library(xtable)
library(ggpubr)
library(readr)
library(ggtext)
library(tidyverse)
library(magrittr)
p1 = variance_df_long %>% filter(str_detect(variable, 'vt')) %>% box_plot
p1
# Box plot
box_plot = function(data){
p = data %>%
ggplot(aes(x = variable, y = value)) +
facet_wrap(d ~ epsilon, nrow = 1) +
geom_boxplot() +
theme_half_open(12) +
background_grid() +
theme(
legend.position = 'none',
strip.background = element_blank(),
strip.text = element_textbox(
size = 12,
color = "white", fill = "gray23", box.color = "gray23",
halign = 0.5, linetype = 1, r = unit(5, "pt"), width = unit(1, "npc"),
padding = margin(2, 0, 1, 0), margin = margin(3, 3, 3, 3)
)
) + xlab('Modelo') + scale_x_discrete(label = c('Q', 'R')) + ylab(' ')
return(p)
}
p1 = variance_df_long %>% filter(str_detect(variable, 'vt')) %>% box_plot
p1
# Box plot
box_plot = function(data){
p = data %>%
ggplot(aes(x = variable, y = value)) +
facet_grid(d ~ epsilon) +
geom_boxplot() +
theme_half_open(12) +
background_grid() +
theme(
legend.position = 'none',
strip.background = element_blank(),
strip.text = element_textbox(
size = 12,
color = "white", fill = "gray23", box.color = "gray23",
halign = 0.5, linetype = 1, r = unit(5, "pt"), width = unit(1, "npc"),
padding = margin(2, 0, 1, 0), margin = margin(3, 3, 3, 3)
)
) + xlab('Modelo') + scale_x_discrete(label = c('Q', 'R')) + ylab(' ')
return(p)
}
p1 = variance_df_long %>% filter(str_detect(variable, 'vt')) %>% box_plot
p1
p2 = variance_df_long %>% filter(str_detect(variable, 'gmv')) %>% box_plot
p3 = variance_df_long %>% filter(str_detect(variable, 'fro')) %>% box_plot
p2
cdcc_estimates_groupby
# Portfolio variance ---- #
variance_df = lapply(variance_files, readRDS) %>% rlist::list.rbind(.) %>%
rename(vt_q = V1, vt_r = V2, fro_q = V3, fro_r = V4,
gmv_real = V5, gmv_q = V6, gmv_r = V7) %>%
mutate(gmv_q = gmv_q / gmv_real, gmv_r = gmv_r / gmv_real) %>%
select(-gmv_real)
renv::status()
renv::init()
renv::status()
renv::snapshot()
library(robcdcc)
renv::dependencies()
renv::hydrate()
renv::status()
renv::install('truncnorm')
renv::status()
library(truncnorm)
library(robcdcc)
renv::status()
renv::snapshot()
library(robcdcc)
library(robcdcc)
renv::restore()
install.packages('Rtools')
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
Sys.which("make")
delta = .975
case_when(
delta == .99 ~ c(1.0185, 1.0101, .99),
delta == .975 ~ c(1.0465, 1.0257, .975),
delta == .95 ~ c(1.0953, 1.0526, .95),
delta == .90 ~ c(1.2030, 1.111, .90),
TRUE ~ c(fc(delta, 1), fc(delta, ncol(rt), delta))
)
library(dplyr)
install.packages('dplyr')
case_when(
delta == .99 ~ c(1.0185, 1.0101, .99),
delta == .975 ~ c(1.0465, 1.0257, .975),
delta == .95 ~ c(1.0953, 1.0526, .95),
delta == .90 ~ c(1.2030, 1.111, .90),
TRUE ~ c(fc(delta, 1), fc(delta, 2), delta))
)
case_when(
delta == .99 ~ c(1.0185, 1.0101, .99),
delta == .975 ~ c(1.0465, 1.0257, .975),
delta == .95 ~ c(1.0953, 1.0526, .95),
delta == .90 ~ c(1.2030, 1.111, .90),
TRUE ~ c(fc(delta, 1), fc(delta, 2), delta))
library(dplyr)
case_when(
delta == .99 ~ c(1.0185, 1.0101, .99),
delta == .975 ~ c(1.0465, 1.0257, .975),
delta == .95 ~ c(1.0953, 1.0526, .95),
delta == .90 ~ c(1.2030, 1.111, .90),
TRUE ~ c(fc(delta, 1), fc(delta, 2), delta))
# Miscellaneous
fc = function(delta, N){
set.seed(1)
chisq = rchisq((10^5), N)
w = as.list(chisq) %>%
lapply(function(x){x * min(1.0, qchisq(delta, N)/x)}) %>%
unlist
res = mean(chisq) / mean(w)
return(res)
}
case_when(
delta == .99 ~ c(1.0185, 1.0101, .99),
delta == .975 ~ c(1.0465, 1.0257, .975),
delta == .95 ~ c(1.0953, 1.0526, .95),
delta == .90 ~ c(1.2030, 1.111, .90),
TRUE ~ c(fc(delta, 1), fc(delta, 2), delta))
delta
delta=.987
case_when(
delta == .99 ~ c(1.0185, 1.0101, .99),
delta == .975 ~ c(1.0465, 1.0257, .975),
delta == .95 ~ c(1.0953, 1.0526, .95),
delta == .90 ~ c(1.2030, 1.111, .90),
TRUE ~ c(fc(delta, 1), fc(delta, 2), delta))
?rchisq
?map
?.
??.
dplyr::%>%
library(robcdcc)
?pryr
install.packages("truncnorm")
renv::status()
renv::snapshot()
library(truncnorm)
library(truncnorm)
library(truncnorm)
library(truncnorm)
install.packages('testthat')
library(truncnorm)
?library(truncnorm)
package_version(truncnorm)
library(robcdcc)
usethis::use_testthat()
install.packages("usethis")
usethis::use_testthat()
usethis::use_test()
usethis::use_test()
usethis::use_testthat()
usethis::use_test()
devtools::test()
library(devtools)
install.packages(devtools)
install.packages("devtools")
devtools::test()
rlang::last_error()
rlang::last_trace()
usethis::use_testthat()
use_test()
usethis::use_test()
usethis::use_test()
usethis::use_test()
usethis::use_testthat()
usethis::use_test()
devtools::test()
.Last.error.trace
devtools::check([])
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(dplyr)
install.packages("dplyr")
devtools::check()
devtools::test()
devtools::test()
rt = simCDCC_C(phi=c(.1, .8), S=diag(2), nobs=2)
rt = simCDCC_C(phi=c(.1, .8), S=diag(2), nobs=2, seed=1)
rt
phi_results = estimateCDCC(rt)
?map
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::test()
rt = simCDCC_C(phi=c(.1, .8), S=diag(2), nobs=3, seed=1)
phi_results = estimateCDCC(rt)
phi_results
rt = simCDCC_C(phi=c(.1, .8), S=diag(2), nobs=1000, seed=1)
phi_results = estimateCDCC(rt)
phi_results
phi_results$phi
robust_phi_results = robust_estimateCDCC(rt, delta=.975)
?case_when
devtools::test()
robust_phi_results = robust_estimateCDCC(rt, delta=.975)
devtools::test()
robust_phi_results = robust_estimateCDCC(rt, delta=.975)
robust_phi_results$phi
robust_phi_results$eta
robust_phi_results$eta$alpha
phi_results$eta$alpha
phi_results$eta$beta
robust_calc_Rt(rt=robust_phi_results$epsilon, phi=robust_phi_results$phi,
S=diag(2), delta=.975)
robust_Rt$w
robust_Rt = robust_calc_Rt(
rt = robust_phi_results$epsilon,
phi = robust_phi_results$phi,
S = diag(2),
delta = .975
)
robust_Rt$w
Rt = robust_Rt$Rt
Rt
max(w)
min(w)
min(robust_Rt$w)
Rt = calc_Rt(rt=phi_results$epsilon, phi=phi_results$phi)
Rt = calc_Rt(rt=phi_results$epsilon, phi=phi_results$phi)
devtools::test()
calc_Rt(rt=phi_results$epsilon, phi=phi_results$phi)
devtools
devtools::test()
Rt = calc_Rt(rt=phi_results$epsilon, phi=phi_results$phi, S=diag(2))
Rt
devtools::test()
calc_Rt(rt=phi_results$epsilon, phi=phi_results$phi, S=diag(2))
calc_Rt(rt=phi_results$epsilon, phi=phi_results$phi, S=diag(2))
calc_Rt(rt=phi_results$epsilon, phi=phi_results$phi, S=diag(2))
calc_Rt(rt=phi_results$epsilon, phi=phi_results$phi, S=diag(2))
calc_Rt(rt=phi_results$epsilon, phi=phi_results$phi, S=diag(2))
calc_Rt(rt=phi_results$epsilon, phi=phi_results$phi, S=diag(2))
calc_Rt(rt=phi_results$epsilon, phi=phi_results$phi, S=diag(2))
calc_Rt(rt=phi_results$epsilon, phi=phi_results$phi, S=diag(2))
calc_Rt(rt=phi_results$epsilon, phi=phi_results$phi, S=diag(2))[1,2]
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
phi_results$eta
phi_results$eta$omega
phi_results$eta[1,]$omega
ht = calc_ht(rt=rt, phi=phi_results$eta, S=diag(2))
eta = phi_results$eta %>% select(omega, alpha, beta) %>% as.numeric
??select
devtools::test()
eta = phi_results$eta %>% select(omega, alpha, beta) %>% as.numeric
phi_results$eta
phi_results$eta %>% select(omega, alpha, beta)
eta = phi_results$eta %>% select(omega, alpha, beta) %>% as.matrix
eta
eta[1,1]
ht = calc_ht(rt=rt, eta=eta)
ht
rt
length(rt)
dim(rt)
nobs = length(rt)
# parameters
eta = as.numeric(eta)
omega = eta[1]
alpha = eta[2]
beta = eta[3]
calc_ht_C(omega, alpha, beta, rt, nobs)
assert(1==2, 'errou')
install.packages('testit')
library(testit)
library(testit)
assert(1==2, 'errou')
assert(1==1, 'errou')
assert('errou', 1==1)
assert('errou', 1==2)
ncol(rt)
assert('rt is not a vector', ncol(rt)==1)
devtools::test()
ht = calc_ht(rt=rt[,1], eta=eta)
rt[,1]
rt[,1] %>% is
rt %>% is
test = rt %>% is
test
test[1]
test[2]
dim(rt[,1])
dim(rt)
ncol(rt[,1])
is(rt)
is(rt)[2] == 'vector'
is.vector(rt[,1])
is.vector(rt)
devtools::test()
ht = calc_ht(rt=rt[,1], eta=eta)
ht
calc_ht(rt=rt, eta=eta)
calc_Dt(rt=rt, eta=eta)
eta
eta = phi_results$eta %>% select(omega, alpha, beta) %>% as.matrix
eta
as.numeric(eta)
calc_ht(rt=rt[,1], eta=eta)
eta
eta = phi_results$eta %>% select(omega, alpha, beta) %>% as.matrix
Dt = calc_Dt(rt=rt, eta=eta)
Dt
phi_results$Dt
phi_results$Dt == Dt
phi_results$Dt
phi_results$Dt %>% head
Dt %>% head
Dt %>% sqrt %>% head
eta
rt = simCDCC_C(phi=c(.1, .8), S=diag(2), nobs=1000, seed=1)
phi_results = estimateCDCC(rt)
phi_results
phi_results$eta
eta
calc_ht(rt=rt[,1], eta=eta[1,])
calc_ht(rt=rt[,1], eta=eta[1,]) %>% head
phi_results$Dt[,1] %>% head
rt = simCDCC_C(phi=c(.1, .8), S=diag(2), nobs=1000, seed=1)
phi_results = estimateCDCC(rt)
robust_phi_results = robust_estimateCDCC(rt, delta=.975)
phi_results$Dt[,1] %>% head
phi_results$Dt[,1] %>% plot
phi_results$Dt[,1] %>% plot(., type='l')
calc_ht(rt=rt[,1], eta=eta[1,]) %>% plot(., type='l', add=TRUE)
calc_ht(rt=rt[,2], eta=eta[2,]) %>% plot(., type='l')
eta
devtools::test()
rt = simCDCC_C(phi=c(.1, .8), S=diag(2), nobs=1000, seed=1)
phi_results = estimateCDCC(rt)
robust_phi_results = robust_estimateCDCC(rt, delta=.975)
phi_results$eta
Dt = calc_Dt(rt=rt, eta=phi_results$eta)
calc_Dt = function(rt, eta_df){
eta_lst = eta_df %>% apply(FUN=list, MARGIN=1) %>% map(1) %>% lapply(unlist)
rt_lst = rt %>% apply(FUN=list, MARGIN=2) %>% map(1)
Dt = mapply(
calc_ht,
rt_lst,
eta_lst,
SIMPLIFY = FALSE
) %>%
rlist::list.cbind(.)
return(Dt)
}
Dt = calc_Dt(rt=rt, eta=phi_results$eta)
phi_results$eta
eta_df = phi_results$eta
eta_lst = eta_df %>% apply(FUN=list, MARGIN=1) %>% map(1) %>% lapply(unlist)
eta_lst
eta_lst[[1]]
eta_lst[[1]]$mu
eta_lst[[1]] %>% is
devtools::test()
Dt = calc_Dt(rt=rt, eta=phi_results$eta)
Dt
phi_results$Dt == Dt
phi_results$Dt == Dt %>% all
(phi_results$Dt == Dt) %>% apply(all, MARGIN = 1)
(phi_results$Dt == Dt) %>% apply(all, MARGIN = 2)
(phi_results$Dt == Dt) %>% apply(all, MARGIN = 2) %>% all
devtools::test()
rm(list = c("calc_Dt"))
devtools::test()
devtools::test()
Dt = calc_Dt(rt=rt, eta=phi_results$eta)
rDt = robust_calc_Dt(rt=rt, eta=phi_results$eta, delta = .975)
Dt = calc_Dt(rt=rt, eta=phi_results$eta)
rDt = robust_calc_Dt(rt=rt, eta=phi_results$eta, delta = .975)
devtools::test()
rDt = robust_calc_Dt(rt=rt, eta=phi_results$eta, delta = .975)
devtools::test()
rDt = robust_calc_Dt(rt=rt, eta=phi_results$eta, delta = .975)
devtools::test()
eta_lst = eta_df %>% apply(FUN=list, MARGIN=1) %>% map(1) %>% lapply(unlist)
rt_lst = rt %>% apply(FUN=list, MARGIN=2) %>% map(1)
rt_lst
Dt = mapply(
robust_calc_ht,
rt_lst,
eta_lst,
MoreArgs = list(delta = delta),
SIMPLIFY = FALSE
) %>%
lapply(function(x){x[, 1]}) %>%
rlist::list.cbind(.)
delta=.975
Dt = mapply(
robust_calc_ht,
rt_lst,
eta_lst,
MoreArgs = list(delta = delta),
SIMPLIFY = FALSE
) %>%
lapply(function(x){x[, 1]}) %>%
rlist::list.cbind(.)
eta_lst[[1]]
rt = rt[,1]
eta = eta_lst[[1]]
robust_control = biv_robust_control(delta)
nobs = length(rt)
rt = rt - eta[1]
assert('rt in calc_ht is not a vector', is.vector(rt)==TRUE)
# robust parameters
cy = robust_control[1]
chisq = qchisq(delta, 1)
rt
robcdcc::robust_calc_ht_C(eta[2], eta[3], eta[4], rt, nobs, cy, chisq)
Dt_results = mapply(
robust_calc_ht,
rt_lst,
eta_lst,
MoreArgs = list(delta = delta),
SIMPLIFY = FALSE
)
Dt = Dt_results %>% map(1) %>% rlist::list.cbind(.)
w = Dt_results %>% map(2) %>% rlist::list.cbind(.)
Dt
w
devtools::test()
devtools::test()
devtools::test()
(robust_phi_results$Dt == rDt)
robust_phi_results
rt = simCDCC_C(phi=c(.1, .8), S=diag(2), nobs=1000, seed=1)
phi_results = estimateCDCC(rt)
robust_phi_results = robust_estimateCDCC(rt, delta=.975)
robust_phi_results$Dt
robust_phi_results$Dt == rDt
Dt = calc_Dt(rt=rt, eta=phi_results$eta)
rDt_lst = robust_calc_Dt(rt=rt, eta=phi_results$eta, delta = .975)
rDt = rDt_lst$Dt
(robust_phi_results$Dt == rDt)
robust_phi_results$D %>% head
rDt %>% head
robust_phi_results$Dt %>% head
eta
rDt_lst = robust_calc_Dt(rt=rt, eta=robust_phi_results$eta, delta = .975)
rDt = rDt_lst$Dt
(robust_phi_results$Dt == rDt)
devtools::test()
rt = simCDCC_C(phi=c(.1, .8), S=diag(2), nobs=1000, seed=1)
phi_results = estimateCDCC(rt)
robust_phi_results = robust_estimateCDCC(rt, delta=.975)
Dt = calc_Dt(rt=rt, eta=phi_results$eta)
rDt_lst = robust_calc_Dt(rt=rt, eta=robust_phi_results$eta, delta = .975)
rDt = rDt_lst$Dt
w = Dt_lst$w
w = rDt_lst$w
w
w %>% min
w %>% apply(min, MARGIN=2)
wmin = rDt_lst$w %>% apply(min, MARGIN=2)
devtools::test()
devtools::test()
devtools::test()
