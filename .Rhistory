devtools::test()
rm(list = c("biv_robust_control"))
devtools::test()
devtools::test()
??rename
library(dplyr)
devtools::test()
?rename
devtools::test()
robust_phi_results
rt = simCDCC_C(phi=c(.1, .8), S=diag(2), nobs=1000, seed=1)
phi_results = estimateCDCC(rt)
robust_phi_results = robust_estimateCDCC(rt, delta=.975)
robust_phi_results
results_lst = geral_calc_portfolio_variance(
phi = c(.1, .8),
q_phi = phi_results$phi,
r_phi = robust_phi_results$phi,
rt = rt,
burn_rt = rt[1:2, ],
r_rt = robust_phi_results$epsilon,
q_rt = phi_results$epsilon,
S = diag(2),
Dt = diag(2),
q_Dt = phi_results$Dt %>% tail(1) %>% as.vector %>% diag,
r_Dt = robust_phi_results$Dt %>% tail(1) %>% as.vector %>% diag,
q_S = diag(2),
r_S = diag(2),
delta = .975
)
results_lst$Ht
solve(Ht)
Ht = results_lst$Ht
solve(Ht)
1 / trace(solve(Ht))
trace(solve(Ht))
tr(solve(Ht))
diag(solve(Ht))
1 / sum(diag(solve(Ht)))
real_var = calc_real_portfolio_variance_C(
phi = c(.1, .8),
rt = rt,
burn_rt = rt[1:2, ],
S = diag(2),
Dt = diag(2)
)
real_var
validate_real_var = 1 / sum(1/2 * diag(solve(Ht)))
validate_real_var
devtools::test()
devtools::test()
library(robcdcc)
??contrOptim
library(robcdcc)
library(robcdcc)
library(robcdcc)
library(robcdcc)
library(robcdcc)
rt = simCDCC_C(phi=c(.1, .8), S=diag(2), nobs=1000, seed=1)
phi_results = estimateCDCC(rt)
robust_phi_results = robust_estimateCDCC(rt, delta=.975)
delta.975
delta = .975
k=30
robust_control = biv_robust_control(delta)
cy1 = robust_control[1]
cy2 = robust_control[2]
delta = robust_control[3]
# quantile for chi square distribution
chisq1 = qchisq(delta, 1) # df = 1
chisq2 = qchisq(delta, 2) # df = 2
# GARCH robust estimation
robust_estimated_GARCH_result = robust_estimateGARCH(rt, cy1, chisq1, k=k)
eta = robust_estimated_GARCH_result$par_df
epsilon = robust_estimated_GARCH_result$std_residuals
Dt = robust_estimated_GARCH_result$Dt
# initial values grid
ini_par = data.frame(a = c(.01, 0.05, .10, .05, .01, .05, .10),
b = c(.9, .9, .9, .8, .7, .7, .7)) %>%
split(., seq(nrow(.)))
ini_par %>% lapply(function(x) robust_loglikelihoodCDCC(
param = x, rt=epsilon, cy1=cy1, chisq1 = chisq1,
cy2=cy2, chisq2 = chisq2))
library(dplyr)
# initial values grid
ini_par = data.frame(a = c(.01, 0.05, .10, .05, .01, .05, .10),
b = c(.9, .9, .9, .8, .7, .7, .7)) %>%
split(., seq(nrow(.)))
ini_par
ini_par %>% lapply(function(x) robust_loglikelihoodCDCC(
param = as.numeric(x), rt=epsilon, cy1=cy1, chisq1 = chisq1,
cy2=cy2, chisq2 = chisq2))
ini_par %>% lapply(function(x){
lkh = robust_loglikelihoodCDCC(param = as.numeric(x), rt=epsilon,
cy1=cy1, chisq1 = chisq1, cy2=cy2,
chisq2 = chisq2)
return(data.frame(a = x[1], b = x[2], lkh = lkh))})
ini_par %>% lapply(function(x){
lkh = robust_loglikelihoodCDCC(param = as.numeric(x), rt=epsilon,
cy1=cy1, chisq1 = chisq1, cy2=cy2,
chisq2 = chisq2)
return(data.frame(a = x[1], b = x[2], lkh = lkh))}) %>% rlist::list.rbind(.)
ini_par %>% lapply(function(x){
lkh = robust_loglikelihoodCDCC(param = as.numeric(x), rt=epsilon,
cy1=cy1, chisq1 = chisq1, cy2=cy2,
chisq2 = chisq2)
return(data.frame(a = x[1], b = x[2], lkh = lkh))}) %>% rlist::list.rbind(.) %>% arrange(lkh)
# initial values grid
ini_par = data.frame(a = c(.01, 0.05, .10, .05, .01, .05, .10),
b = c(.9, .9, .9, .8, .7, .7, .7)) %>%
split(., seq(nrow(.)))
ini_par = ini_par %>% lapply(function(x){
lkh = robust_loglikelihoodCDCC(param = as.numeric(x), rt=epsilon,
cy1=cy1, chisq1 = chisq1, cy2=cy2,
chisq2 = chisq2)
return(data.frame(a = x[1], b = x[2], lkh = lkh))}) %>%
rlist::list.rbind(.)
ini_par
robust_optimCDCC
initial_values = ini_par %>% head() %>% select(a,b)
initial_values
ini_par %>% head(1) %>% select(a,b)
initial_values = ini_par %>% head(1) %>% select(a,b) %>% as.numeric
initial_values
library(robcdcc)
robust_optimCDCC
initial_values
phi = robust_optimCDCC(rt=epsilon, cy1=cy1, chisq1=chisq1,
cy2=cy2, chisq2=chisq2, ini_par=initial_values)
phi
as.matrix(c(.01, 0.05, .10, .05, .01, .05, .10,
.9, .9, .9, .8, .7, .7, .7), ncol=2)
as.matrix(c(.01, 0.05, .10, .05, .01, .05, .10,
.9, .9, .9, .8, .7, .7, .7), ncol=2, byrow=TRUE)
matrix(c(.01, 0.05, .10, .05, .01, .05, .10,
.9, .9, .9, .8, .7, .7, .7), ncol=2, byrow=TRUE)
matrix(c(.01, 0.05, .10, .05, .01, .05, .10,
.9, .9, .9, .8, .7, .7, .7), ncol=2, byrow=FALSE)
# initial values grid
ini_par = matrix(c(.01, 0.05, .10, .05, .01, .05, .10,
.9, .9, .9, .8, .7, .7, .7), ncol=2, byrow=FALSE) %>%
split(., seq(nrow(.)))
ini_par
ini_par = ini_par %>% lapply(function(x){
lkh = robust_loglikelihoodCDCC(param = x, rt=epsilon,
cy1=cy1, chisq1 = chisq1, cy2=cy2,
chisq2 = chisq2)
return(data.frame(a = x[1], b = x[2], lkh = lkh))}) %>%
rlist::list.rbind(.)
ini_par
initial_values = ini_par %>% head(1) %>% select(a,b) %>% as.numeric
initial_values
ini_par = matrix(c(.01, 0.05), ncol=2, byrow=FALSE) %>%
split(., seq(nrow(.)))
ini_par
ini_par = ini_par %>% lapply(function(x){
lkh = robust_loglikelihoodCDCC(param = x, rt=epsilon,
cy1=cy1, chisq1 = chisq1, cy2=cy2,
chisq2 = chisq2)
return(data.frame(a = x[1], b = x[2], lkh = lkh))}) %>%
rlist::list.rbind(.)
initial_values = ini_par %>% head(1) %>% select(a,b) %>% as.numeric
initial_values
ini_par=c(0.03, .95)
# initial values grid
ini_grid = matrix(ini_par, ncol=2, byrow=FALSE) %>%
split(., seq(nrow(.)))
ini_results = ini_grid %>% lapply(function(x){
lkh = robust_loglikelihoodCDCC(param = x, rt=epsilon,
cy1=cy1, chisq1 = chisq1, cy2=cy2,
chisq2 = chisq2)
return(data.frame(a = x[1], b = x[2], lkh = lkh))}) %>%
rlist::list.rbind(.)
initial_values = ini_results %>% head(1) %>% select(a,b) %>% as.numeric
initial_values
# cDCC robust estimation
phi = robust_optimCDCC(rt=epsilon, cy1=cy1, chisq1=chisq1,
cy2=cy2, chisq2=chisq2, ini_par=initial_values)
phi
ini_par = c(.1, .95)
ini_par = c(.1, .80)
# initial values grid
ini_grid = matrix(ini_par, ncol=2, byrow=FALSE) %>%
split(., seq(nrow(.)))
ini_grid
ini_results = ini_grid %>% lapply(function(x){
lkh = robust_loglikelihoodCDCC(param = x, rt=epsilon,
cy1=cy1, chisq1 = chisq1, cy2=cy2,
chisq2 = chisq2)
return(data.frame(a = x[1], b = x[2], lkh = lkh))}) %>%
rlist::list.rbind(.)
initial_values = ini_results %>% head(1) %>% select(a,b) %>% as.numeric
initial_values
# cDCC robust estimation
phi = robust_optimCDCC(rt=epsilon, cy1=cy1, chisq1=chisq1,
cy2=cy2, chisq2=chisq2, ini_par=initial_values)
phi
robust_phi_results = robust_estimateCDCC(rt, delta=.975)
robust_phi_results
robust_phi_results$phi
ini_par = c(.01, 0.05, .10, .05, .01, .05, .10, .9, .9, .9, .8, .7, .7, .7)
# initial values grid
ini_par = c(.01, 0.05, .10, .05, .01, .05, .10, .9, .9, .9, .8, .7, .7, .7)
ini_grid = matrix(ini_par, ncol=2, byrow=FALSE) %>%
split(., seq(nrow(.)))
ini_grid
ini_results =  ini_grid %>% lapply(function(x){
lkh = robust_loglikelihoodCDCC(param = x, rt=epsilon,
cy1=cy1, chisq1 = chisq1, cy2=cy2,
chisq2 = chisq2)
return(data.frame(a = x[1], b = x[2], lkh = lkh))}) %>%
rlist::list.rbind(.)
initial_values = ini_par %>% head(1) %>% select(a,b) %>% as.numeric
ini_results
initial_values = ini_results %>% head(1) %>% select(a,b) %>% as.numeric
initial_values
# cDCC robust estimation
phi = robust_optimCDCC(rt=epsilon, cy1=cy1, chisq1=chisq1,
cy2=cy2, chisq2=chisq2, ini_par=initial_values)
phi
ini_par
# initial values grid
ini_grid = matrix(ini_par, ncol=2, byrow=FALSE) %>%
split(., seq(nrow(.)))
ini_results =  ini_grid %>% lapply(function(x){
lkh = robust_loglikelihoodCDCC(param = x, rt=epsilon,
cy1=cy1, chisq1 = chisq1, cy2=cy2,
chisq2 = chisq2)
return(data.frame(a = x[1], b = x[2], lkh = lkh))}) %>%
rlist::list.rbind(.) %>% arrange(lkh)
ini_results
ini_results =  ini_grid %>% lapply(function(x){
lkh = robust_loglikelihoodCDCC(param = x, rt=epsilon,
cy1=cy1, chisq1 = chisq1, cy2=cy2,
chisq2 = chisq2)
return(data.frame(a = x[1], b = x[2], lkh = lkh))}) %>%
rlist::list.rbind(.) %>% arrange(lkh)
initial_values = ini_results %>% head(1) %>% select(a,b) %>% as.numeric
initial_values
# cDCC robust estimation
phi = robust_optimCDCC(rt=epsilon, cy1=cy1, chisq1=chisq1,
cy2=cy2, chisq2=chisq2, ini_par=initial_values)
phi
phi = optimCDCC(epsilon)
phi
phi = optimCDCC(epsilon, ini_par = c(.1, .7))
phi
robust_optimCDCC(rt=epsilon, cy1=cy1, chisq1=chisq1,
cy2=cy2, chisq2=chisq2, ini_par=c(.05, .93))
?constrOptim
ini_results
robust_optimCDCC(rt=epsilon, cy1=cy1, chisq1=chisq1,
cy2=cy2, chisq2=chisq2, ini_par=c(.05, .93))
robust_optimCDCC(rt=epsilon, cy1=cy1, chisq1=chisq1,
cy2=cy2, chisq2=chisq2, ini_par=c(.06, .93))
library(robcdcc)
robust_optimCDCC
robust_optimCDCC(rt=epsilon, cy1=cy1, chisq1=chisq1,
cy2=cy2, chisq2=chisq2, ini_par=c(.05, .93))
robust_optimCDCC(rt=epsilon, cy1=cy1, chisq1=chisq1,
cy2=cy2, chisq2=chisq2, ini_par=c(.06, .93))
robust_optimCDCC(rt=epsilon, cy1=cy1, chisq1=chisq1,
cy2=cy2, chisq2=chisq2, ini_par=c(.1, .93))
robust_optimCDCC(rt=epsilon, cy1=cy1, chisq1=chisq1,
cy2=cy2, chisq2=chisq2, ini_par=c(.1, .8))
robust_optimCDCC(rt=epsilon, cy1=cy1, chisq1=chisq1,
cy2=cy2, chisq2=chisq2, ini_par=c(.03, .93))
library(robcdcc)
library(robcdcc)
library(robcdcc)
optimCDCC
# GARCH estimation
estimated_GARCH_result = estimateGARCH(rt)
eta = estimated_GARCH_result$par_df
epsilon = estimated_GARCH_result$std_residuals
Dt = estimated_GARCH_result$Dt
# cDCC estimation
phi = optimCDCC(epsilon, ini_par = ini_par)
ini_par
ini_par = c(.05, .93)
phi = optimCDCC(epsilon, ini_par = ini_par)
phi
robust_control = biv_robust_control(delta)
cy1 = robust_control[1]
cy2 = robust_control[2]
delta = robust_control[3]
# quantile for chi square distribution
chisq1 = qchisq(delta, 1) # df = 1
chisq2 = qchisq(delta, 2) # df = 2
# GARCH robust estimation
robust_estimated_GARCH_result = robust_estimateGARCH(rt, cy1, chisq1, k=k)
eta = robust_estimated_GARCH_result$par_df
epsilon = robust_estimated_GARCH_result$std_residuals
Dt = robust_estimated_GARCH_result$Dt
# # initial values grid
# ini_grid = matrix(ini_par, ncol=2, byrow=FALSE) %>%
#   split(., seq(nrow(.)))
#
# ini_results =  ini_grid %>% lapply(function(x){
#   lkh = robust_loglikelihoodCDCC(param = x, rt=epsilon,
#                            cy1=cy1, chisq1 = chisq1, cy2=cy2,
#                            chisq2 = chisq2)
#   return(data.frame(a = x[1], b = x[2], lkh = lkh))}) %>%
#   rlist::list.rbind(.) %>% arrange(lkh)
#
# initial_values = ini_results %>% head(1) %>% select(a,b) %>% as.numeric
# cDCC robust estimation
phi = robust_optimCDCC(rt=epsilon, cy1=cy1, chisq1=chisq1,
cy2=cy2, chisq2=chisq2, ini_par = ini_par)
phi
ini_par
ini_par = c(.1, .8)
ini_par
# cDCC robust estimation
phi = robust_optimCDCC(rt=epsilon, cy1=cy1, chisq1=chisq1,
cy2=cy2, chisq2=chisq2, ini_par = ini_par)
phi
library(robcdcc)
robust_estimated_GARCH_result = robust_estimateGARCH(rt, cy1, chisq1, k=k)
eta = robust_estimated_GARCH_result$par_df
eta
# GARCH robust estimation
robust_estimated_GARCH_result = robust_estimateGARCH(rt, cy1, chisq1, k=k,
ini_par=c(.1, .8))
library(robcdcc)
# GARCH robust estimation
robust_estimated_GARCH_result = robust_estimateGARCH(rt, cy1, chisq1, k=k,
ini_par=c(.1, .8))
eta = robust_estimated_GARCH_result$par_df
eta
library(robcdcc)
# GARCH estimation
estimated_GARCH_result = estimateGARCH(rt)
eta = estimated_GARCH_result$par_df
eta
# GARCH estimation
estimated_GARCH_result = estimateGARCH(rt, ini_par=c(.1, .8))
eta = estimated_GARCH_result$par_df
eta
library(robcdcc)
# GARCH estimation
estimated_GARCH_result = estimateGARCH(rt, ini_par=c(.1, .8))
eta = estimated_GARCH_result$par_df
eta
estimated_GARCH_result = estimateGARCH(rt, ini_par=c(.1, .9))
eta = estimated_GARCH_result$par_df
# GARCH estimation
estimated_GARCH_result = estimateGARCH(rt, ini_par=c(.1, .9))
estimateGARCH(rt, ini_par=c(.1, .9))
rt
estimateGARCH
library(robcdcc)
library(robcdcc)
estimated_GARCH_result = estimateGARCH(rt, ini_par=c(.1, .9))
estimated_GARCH_result = estimateGARCH(rt, ini_par=c(.1, .8))
estimateGARCH
gradientCDCC
estimateGARCH(rt, ini_par=c(.1, .8))
estimateGARCH(rt)
library(robcdcc)
# GARCH estimation
estimated_GARCH_result = estimateGARCH(rt)
eta = estimated_GARCH_result$par_df
eta
rt
library(robcdcc)
ini_par
ini_par = c(.1, .8)
# GARCH estimation
estimated_GARCH_result = estimateGARCH(rt)
rt
rt = simCDCC_C(phi=c(.1, .8), S=diag(2), nobs=1000, seed=1)
# GARCH estimation
estimated_GARCH_result = estimateGARCH(rt)
eta = estimated_GARCH_result$par_df
epsilon = estimated_GARCH_result$std_residuals
Dt = estimated_GARCH_result$Dt
# cDCC estimation
phi = optimCDCC(epsilon, ini_par = ini_par)
phi
ini_par
optimCDCC(epsilon)
# GARCH estimation
estimated_GARCH_result = estimateGARCH(rt)
eta = estimated_GARCH_result$par_df
eta
library(robcdcc)
rt = simCDCC_C(phi=c(.1, .8), S=diag(2), nobs=1000, seed=1)
phi_results = estimateCDCC(rt)
library(robcdcc)
rt = simCDCC_C(phi=c(.1, .8), S=diag(2), nobs=1000, seed=1)
phi_results = estimateCDCC(rt)
robust_estimateGARCH(rt)
estimateGARCH(rt)
estimateGARCH(rt)$eta
estimateGARCH(rt) %>% names
library(dplyr)
estimateGARCH(rt)
test = estimateGARCH(rt)
test$par_df
test = robust_estimateGARCH(rt, cy1=1, chisq=1)
delta = .975
robust_control = biv_robust_control(delta)
cy1 = robust_control[1]
cy2 = robust_control[2]
delta = robust_control[3]
# quantile for chi square distribution
chisq1 = qchisq(delta, 1) # df = 1
chisq2 = qchisq(delta, 2) # df = 2
# GARCH robust estimation
robust_estimated_GARCH_result = robust_estimateGARCH(rt, cy1, chisq1, k=k)
k=30
# GARCH robust estimation
robust_estimated_GARCH_result = robust_estimateGARCH(rt, cy1, chisq1, k=k)
eta = robust_estimated_GARCH_result$par_df
eta
nobs = 1000
nday = 10
aux1 = seq(nobs / nday, nobs, nobs / nday)
aux1 = seq(nobs / nday, nobs, nobs / nday)
aux2 = c(0, aux1[-length(aux1)])
aux1
aux2
times = (aux1 + aux2) / 2 + 1
times
times |> length()
idx = sample.int(length(times), round(nday * .40))
idx
cojumps = times[idx] %>% sort(.)
library(dplyr)
times[idx]
times[-idx]
library(robcdcc)
rt = simCDCC_C(phi=c(.1, .8), S=diag(2), nobs=1000, seed=1)
phi_results = estimateCDCC(rt)
robust_phi_results = robust_estimateCDCC(rt, delta=.975)
phi_results
phi_results$phi
hat_phi = phi_results$phi
phi = c(.1, .8)
hat_phi
hat_phi - phi
(hat_phi - phi) / phi
abs(hat_phi - phi) / phi
simCDCC_C
phi_results$eta$alpha
q_phi_ape = abs(q_results$phi - phi) / phi
r_phi_ape = abs(r_results$phi - phi) / phi
rt = simCDCC_C(phi=phi, S=diag(2), nobs=1000, seed=1)
q_results = estimateCDCC(rt)
r_results = robust_estimateCDCC(rt, delta=.975)
q_phi_ape = abs(q_results$phi - phi) / phi
r_phi_ape = abs(r_results$phi - phi) / phi
q_phi_ape
r_phi_ape
r_results$phi
Dt = calc_Dt(rt=rt, eta=q_results$eta)
rDt_lst = robust_calc_Dt(rt=rt, eta=r_results$eta, delta = .975)
rDt = rDt_lst$Dt
wmin = rDt_lst$w %>% apply(min, MARGIN=2)
rDt_lst$w
library(dplyr)
devtools::document()
install.packages("devtools")
devtools::document()
?optim
renv::status()
renv:snapshot()
renv::snapshot()
install.packages('truncnorm')
renv::status()
renv::upgrade()
renv::hydrate(update = 'all')
renv::snapshot()
renv::status()
renv::restore()
renv::status()
renv::snapshot()
# Simulation
S = diag(2) * .4
eta = matrix(c(.1, .1, .8, .1, .2, .7), byrow = TRUE, ncol = 3)
phi = c(.1, .8)
sim_lst = simCDCC(phi=phi, eta=eta, S=S, nobs=1000, ndim=2, seed=1)
library(robcdcc)
# Simulation
S = diag(2) * .4
eta = matrix(c(.1, .1, .8, .1, .2, .7), byrow = TRUE, ncol = 3)
phi = c(.1, .8)
sim_lst = simCDCC(phi=phi, eta=eta, S=S, nobs=1000, ndim=2, seed=1)
rt = sim_lst$rt # returns matrix
ht = sim_lst$ht # conditional variance matrix
Rt = sim_lst$Rt # conditional correlations matrices
# Estimation
q_results = estimateCDCC(rt=rt) # traditional estimation procedure
r_results = robust_estimateCDCC(rt=rt) # robusta estamation procedure
rt
estimateCDCC(rt=rt)
robust_estimateCDCC(rt=rt, delta=.975)
library(robcdcc)
S = diag(2) * .4
eta = matrix(c(.1, .1, .8, .1, .2, .7), byrow = TRUE, ncol = 3)
phi = c(.1, .8)
sim_lst = simCDCC(phi=phi, eta=eta, S=S, nobs=1000, ndim=2, seed=1)
rt = sim_lst$rt # returns matrix
ht = sim_lst$ht # conditional variance matrix
Rt = sim_lst$Rt # conditional correlations matrices
# Estimation
q_results = estimateCDCC(rt=rt) # traditional estimation procedure
r_results = robust_estimateCDCC(rt=rt) # robusta estamation procedure
r_results
library(robcdcc)
?install.packages
